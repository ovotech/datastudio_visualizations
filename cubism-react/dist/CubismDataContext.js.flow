// @flow strict
import * as React from "react";
import Immutable from "immutable";
import type { RecordOf, RecordFactory } from "immutable";
import type { DataUnbucketed } from "./types";
import QuantizableDateRecord from "./QuantizableDateRecord";
export type DataProps = {|
  rawData: any,
  data: DataUnbucketed,
  dataMin: number,
  dataMax: number,
  dates: Immutable.List<QuantizableDateRecord>,
  dateMin: QuantizableDateRecord,
  dateMax: QuantizableDateRecord,
  dateOverlap: ?QuantizableDateRecord,
|};
export type DataType = RecordOf<DataProps>;
export const Data: RecordFactory<DataProps> = Immutable.Record({
  rawData: null,
  data: Immutable.Map(),
  dataMin: 0,
  dataMax: 0,
  dates: Immutable.List(),
  dateMin: new QuantizableDateRecord(),
  dateMax: new QuantizableDateRecord(),
  dateOverlap: null
});
export type DataContextType = React.Context<DataType>;
const context: DataContextType = React.createContext(Data());
context.displayName = "DataContext";
export default context;